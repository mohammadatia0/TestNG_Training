Note:
1-
Test arch
each Test suites ---> contains # of Test cases ---> each TC contains # of Test steps

but in TestNG
Test suites is (Packages) ---> Test cases are (classes) ---> Test steps are (methods)

in TestNG there is no main method, just we use @Test annotation for each method

TestNG run all methods in alphabetical way so to run the tests as you want you need to prioritize tests
@Test(priority=1) number is 1,2,3,4,5,...

2-
Now after we create FirstTest class and steps included, we want to create SecondTest with its steps,
To run both classes we need to create XML file called "testing.xml"
steps to create this file:
* sitting -> plugin -> install "create testng xml"
* right click on project name and create testng xml, this will create new file called testing.xml - you need to reload project  to see the file
after this added inside XML:
Also from XML you can select the method ot methods that you want to run
        <classes>
            <class name="Annotations_TC1">
                <methods>
                    <include name="step1"/>
                    <include name="step2"/>
                </methods>
            </class>
        </classes>
and then run XML file...

To generate the report for last run:
*run -> edit configurations -> listeners -> add(emailing report & failreport eamiling)
after run XML file new report will create under test-output you can open it using chrome

To test fail test just add this line inside any steps from any class and then check report
                            actual     expected
        Assert.assertEquals(1       ,  2);
        after this line step will fail
If the steps is fail TestNG will create another report contains just failed steps, so if you fix the failed steps
you can re-run new testing-failed.xml file to check your fix
And then you can run all tests to get new report without any errors.

3-
TestNG annotations:
control sequence & priority of the methods(steps for each test)
main important annotations in TestNG:
@BeforeSuite
    @BeforeTest
        @BeforeClass
            @BeforeMethod
    -->          @Test
            @AfterMethod
        @AfterClass
    @AfterTest
@AfterSuite


Descriptions for each annotation:
See Annotations (Annotation_TC1,Annotation_TC2)classes   <---

4-
Prioritizing and disabling Tests

if under the same class there are many steps(methods) seleium will run them randomly in alphabatical way, to run them
in secuence you need to add @Test(priority=0), 0,1,2,3,...
but if there is a step not completed and i need to run all the steps except not completed one
just add  @Test(priority=5,enabled = false), 5 is an example and enabled = false will not run the test
ex: in SecondTest step 4 will not run

5-
dependency tests & Alwaysrun property
dependency tests:
In some cases some tests depends on some other tests, to dial with that:
if we have step 2 depend on step 1
and step one fail, should step2 run ?
ans: it will ignored(not run)
but what if i need to run step2 even step1 fail?
will use     @Test(dependsOnMethods = {"startcar","drivecar"},alwaysRun = true)
see( DependencyTests )class for more info


6-
Grouping Tests:
if we want to separate some tests for smoke or functional and we want to run those tests as a group.
for more ifo visit GroupingExample class

7-
        Assert.assertEquals();
        Assert.assertTrue();
        Assert.assertFalse();

        --> All info in AsertionExample class   <---

8-
    Parameters in TestNG
    If we want to pass parameter on the Testng for the test:

9-
    DataProvider in TestNG
    this is the second type of parameters in TestNG
    this mean that the same test can be run with different set of data.
    * in this case we must create another method called dataprovider that supply the (methos with parameters) with data -> @DataProvider
    * dataprovider method return 2D array of object
    * we invoke the dataprovider method by its name
    * can be implemented in the same class or in different class
    for more info go to DataProviderExample, CustomDataProviderExample


10-

Parallel Testing
you can run every thing in parallel Tests,Methods,Classes, Suites,...
like what i did in parallel.xml













